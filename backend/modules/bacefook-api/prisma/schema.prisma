// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  firstName String
  lastName  String
  bio       String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Referral relationships (tree structure)
  referredBy   User?   @relation("Referrals", fields: [referredById], references: [id])
  referredById String?
  referrals    User[]  @relation("Referrals")

  // Friendship relationships (many-to-many)
  friends  User[] @relation("UserFriends")
  friendOf User[] @relation("UserFriends")

  // Analytics data
  referralPoints  ReferralPoint[]
  networkStrength NetworkStrength?
}

model ReferralPoint {
  id        String   @id @default(cuid())
  userId    String   @unique
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model NetworkStrength {
  id           String   @id @default(cuid())
  userId       String   @unique
  strength     Int      @default(0)
  calculatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Event {
  id        String   @id @default(cuid())
  type      String // "register", "referral", "addfriend", "unfriend"
  data      Json // Store event-specific data
  createdAt DateTime @default(now())
  processed Boolean  @default(false)
}
